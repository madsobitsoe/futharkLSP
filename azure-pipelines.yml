# This is a simple Azure configuration, which is intended for use
# on applications which do not require cross-platform and
# multiple-GHC-version support. For more information and other
# options, see:
#
# https://docs.haskellstack.org/en/stable/azure_ci/

jobs:
- job: build
  pool:
    vmImage: ubuntu-18.04

  timeoutInMinutes: 120

  steps:

  - script: |
      sudo apt update
      sudo apt install opencl-headers nvidia-cuda-dev nvidia-opencl-dev python-numpy
    displayName: Install OS-level dependencies

  - script: |
      mkdir -p ~/.local/bin
      curl -L https://get.haskellstack.org/stable/linux-x86_64.tar.gz | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'
    displayName: Install Stack

  - script: |
      export PATH=$HOME/.local/bin:$PATH
      stack --no-terminal --install-ghc test --only-dependencies
    displayName: Build Haskell dependencies

  - script: |
      export PATH=$HOME/.local/bin:$PATH
      stack install --no-terminal
    displayName: Build and install Futhark compiler

  - script: |
      export PATH=$HOME/.local/bin:$PATH
      # Build the package, its tests, and its docs and run the tests
      stack test --no-terminal --haddock --no-haddock-deps
    displayName: Run unit tests

  # - script: |
  #     export PATH=$HOME/.local/bin:$PATH
  #     stack install
  #     futhark test --no-terminal --no-tuning tests examples
  #   displayName: Compile and run tests

  - script: |
      export PATH=$HOME/.local/bin:$PATH
      stack install
      futhark test -C --no-terminal --backend=opencl tests examples --exclude=no_opencl
    displayName: Compile with backend=opencl

  - script: |
      export PATH=$HOME/.local/bin:$PATH
      stack install
      futhark test -C --no-terminal --backend=cuda tests examples --exclude=no_opencl
    displayName: Compile with backend=cuda

  - script: |
      export PATH=$HOME/.local/bin:$PATH
      stack install
      futhark test -c --no-terminal --no-tuning --backend=python tests examples --exclude=no_python
    displayName: Compile and run with backend=python
